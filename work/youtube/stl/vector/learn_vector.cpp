/*
   幫我把同類型的整理在一起（不用同一頁ppt）




*/
#include<iostream>
#include<vector>
using namespace std;
class Test{
   int m;
   char id;
   public:
      Test(int m,char id):m(m),id(id){}
};
void print(vector <int> v,int name_num){
   cout<<"-------------------------------------------------------\n";
   cout<<"v"<<name_num<<": ";
   for(auto i:v){
      cout<<i<<" ";
   }
   cout<<endl;
   cout<<"-------------------------------------------------------"<<endl;
}
int main(){
/*
//初始化==============================================================================================================================
   //空的vector----------------------------------------------------------------------------
   //vector();
   vector <int> v1;
   print(v1,1);

   //使用v1的記憶體配置器初始化vector-----------------------------------------------------------------------
   //explicit vector(const Allocator& allocator);
   vector <int> v2( v1.get_allocator( ) );  
   print(v2,2);

   //空間大小為100的vector-----------------------------------------------------------------------
   //explicit vector(size_type count);
   vector <int> v3 (10);                        
   print(v3,3);

   //空間大小為10且每個元素都為21的vector-----------------------------------------------------------------------
   //vector(size_type count, const Type& value);
   vector <int> v4 (10,21);  
   print(v4,4);

   //空間大小為10且每個元素都為21且使用v1的記憶體配置器初始化的vector-----------------------------------------------------------------------
   //vector(size_type count, const Type& value, const Allocator& allocator);
   vector <int> v5 (10,21,v1.get_allocator( )); 
   print(v5,5);

   //複製一份v4至v6---------------------------------------------------------------------------------------------------------------------------------------------
   //vector(const vector& source);
   vector <int> v6 (v4);                         
   print(v6,6);

   //把v6移至v7--------------------------------------------------------------------------------------------------------------------------------------------
   //vector(vector&& source);
   vector <int> v7(move(v6));
   print(v6,6);
   print(v7,7);

   //使用{}將內容丟入--------------------------------------------------------------------------------------------------------------------------------------------
   //vector(initializer_list<Type> init_list, const Allocator& allocator);
   vector <int> v8 {1,2,4,3,5,6};
   print(v8,8);

   //將v8部分片段複製至v9--------------------------------------------------------------------------------------------------------------------------------------------
   //template <class InputIterator>
   //vector(InputIterator first, InputIterator last);
   vector <int> v9(v8.begin()+1,v8.end()-2);
   print(v8,8);
   print(v9,9);

//初始化結束==============================================================================================================================


//assign():將原有vector清除後，重設==============================================================================================================================
   
   //將原有vector清除後，重設空間大小為10且每個元素都為4的vector------------------------------------------------------------------------------------
   //void assign(size_type count, const Type& value);
   vector <int> v10(5,9);
   print(v10,10);
   v10.assign(10,4);
   print(v10,10);

   //將原有vector清除後，使用{}將內容丟入vector------------------------------------------------------------------------------------
   //void assign(initializer_list<Type> init_list);
   vector <int> v11(5,9);
   print(v11,11);
   v10.assign({1,3,5,7});
   print(v11,11);

   //將原有vector清除後，將v12_1部分片段複製至v12------------------------------------------------------------------------------------
   //template <class InputIterator>
   //void assign(InputIterator first, InputIterator last);
   vector <int> v12(3,1);
   print(v12,12);
   vector <int> v12_1(5,9);
   v12.assign(v12_1.begin(),v12_1.end());
   print(v12,12);

//assign()結束======================================================================================================================================================

//at():傳回指定項目的refrence、亦可當[]使用================================================================================================================================
   //傳回值可以更改--------------------------------------------------------------------
   //reference at(size_type position);
   vector<int>v13(10,5);
   print(v13,13);
   int &p=v13.at(2);
   p=100;
   print(v13,13);

   //傳回值無法更改--------------------------------------------------------------------
   //const_reference at(size_type position) const;
   vector<int>v14(10,5);
   print(v14,13);
   const int &p=v14.at(2);
   //p=100;                        //會報錯
   print(v14,13);

   //[]vs at()------------------------------------------------------------------------
   vector<int>v15;
   cout<<v15.at(100);                 //out_of_range          可以使用try catch捕獲
   cout<<v15[100];                    //segmentation fault
   
//at()結束================================================================================================================================

//front() & back():回傳第一個值＆最後一項的值================================================================================================================================
   //傳回值可以更改--------------------------------------------------------------------
   vector<int>v16({1,2,3,4,5});
   cout<<"v16.back():"<<v16.back()<<endl;
   int &pb=v16.back();
   pb=100;
   cout<<"v16.back():"<<v16.back()<<endl;
   cout<<"==================================="<<endl;
   cout<<"v16.front():"<<v16.front()<<endl;
   int &pf=v16.front();
   pf=101;
   cout<<"v16.front():"<<v16.front()<<endl;
   cout<<"==================================="<<endl;
   print(v16,16);
   //以下front都是同理
   //傳回值不可以更改--------------------------------------------------------------------
   vector<int>v17({1,2,3,4,5});
   cout<<v17.back()<<endl;
   const int &p=v17.back();
   //p=100; //const 不可使用
   cout<<v17.back()<<endl;
   //如果vector為空，回傳值不明--------------------------------------------------------------
   vector <int> v18;
   cout<<v18.back();       //segmentation fault
//back()結束================================================================================================================================

//beging() & end():迭代器====================================================================================================
   vector <int> v19(5,19);
   vector<int>::iterator v19_iter_beging;
   vector<int>::iterator v19_iter_end;
   v19_iter_beging=v19.begin();
   v19_iter_end=v19.end();
   for(;v19_iter_beging!=v19_iter_end;v19_iter_beging++)
      cout<<*v19_iter_beging<<" ";
   cout<<endl;
//beging() & end()結束====================================================================================================

//capacity() & size()=============================================================================================================
   //capacity():目前配置給vector的儲存空間長度
   //size_type capacity() const;
   //size():項目個數
   //size_type size() const;
   vector<int>v20(20);
   cout<<v20.size()<<endl;
   cout<<v20.capacity()<<endl;
   //初始的size跟capacity是一樣的
   v20.push_back(0);
   cout<<v20.size()<<endl;
   cout<<v20.capacity()<<endl;
   //有變動後，size是目前使用到的大小（項目個數），capacity是size＋預留空間的大小

//capacity() & size()結束=============================================================================================================

//clear():清除vector的元素=============================================================================================================
   vector<int> v21(100,81);
   cout<<v21.size()<<endl;
   v21.clear();
   cout<<v21.size()<<endl;
//clear():清除vector的元素=============================================================================================================

//data():回傳vector中第一個指標============================================================================================================
   //pointer data()
   //可以更改
   vector<int> v22(5,22);
   vector<int>::pointer v22_ptr;
   print(v22,22);
   v22_ptr = v22.data();
   *v22_ptr = 20;
   print(v22,22);

   //const_pointer data() const;
   //不能更改
   vector<int> v23(5,22);
   vector<int>::const_pointer v23_cPtr;
   v23_cPtr = v23.data();
   for (int n = v23.size(); 0 < n; --n, v23_cPtr++){
      cout << " " << *v23_cPtr;
   }

//data()結束============================================================================================================

//emplace():在指定位置插入元素============================================================================================================
   vector <int > v24({1,2,3,4,5,6,7,8,9});
   print(v24,24);
   v24.emplace(v24.begin()+2,10000000);
   print(v24,24);

//emplace():結束============================================================================================================


//emplace_back():根據該根據該物件呼叫建構式，並放入vector最後一項============================================================================================================
   vector <Test> v25;
   v25.emplace_back(1,'k');
//emplace_back():結束============================================================================================================

//empty():判斷vector是否是空值============================================================================================================
   vector<int> v26({1,2,3,4,5,4,3,2,1});
   cout<<v26.empty()<<endl;
   v26.clear();
   cout<<v26.empty();
//empty():結束============================================================================================================

//erase():刪除指定位置的元素============================================================================================================
   vector<int> v27({1,2,9,4,5,6,7,8,9});

   cout<<v27.erase(v27.begin()+3)-v27.begin()<<endl;//刪除一個
   print(v27,27);

   cout<<v27.erase(v27.begin()+3,v27.end()-2)-v27.begin()<<endl;//刪除範圍
   print(v27,27);

//erease():結束============================================================================================================

//insert():將欲插入之vector或物件插入目標vector============================================================================================================
   vector <int> v28({11,12,13,14,15,16,17,18,19});
   vector <int> v28_1({21,22,23,24,25,26,27,28,29});

   //iterator insert(const_iterator position,const Type& value);
   v28.insert( v28.begin( ) + 1, 250 );
   print(v28,28);

   //iterator insert(const_iterator position,Type&& value);
   v28.insert( v28.begin( ) + 1, 3,182 );
   print(v28,28);

   
     template <class InputIterator>
     void insert(const_iterator position,InputIterator first,InputIterator last);
   
   v28.insert(v28.begin()+5,v28_1.begin(),v28_1.end());
   print (v28,28);
//insert():結束============================================================================================================

//max_size():傳回向量最大可能長度============================================================================================================
   //size_type max_size() const;
   vector <int> v29({1,2,3,4,5,6,7,8,9});
   cout<<v29.max_size();

//max_size():結束============================================================================================================

//pop_back():刪除最後一個元素============================================================================================================
   //void pop_back();
   vector <int> v29({1,2,3,4,5,6,7,8,9});
   print(v29,29);
   v29.pop_back();
   print(v29,29);

//pop_back()結束============================================================================================================

//push_back():在vector尾部加入值============================================================================================================
   //void push_back(const T& value);
   //void push_back(T&& value);
   vector<int>v30({1,2,3,4,5,6,7,8,9});
   print(v30,30);
   v30.push_back(299);
   print(v30,30);
//push_back()結束============================================================================================================


//rbegin() & rend():反向迭代器============================================================================================================
   //reverse_iterator rbegin();
   //const_reverse_iterator rbegin() const;

   //const_reverse_iterator rend() const;
   //reverse_iterator rend();

   vector <int> v31({1,2,3,4,5,6,7,8,9});
   for(auto i=v31.rbegin();i!=v31.rend();i++)
      cout<<*i<<" ";
   cout<<endl;
   for(auto i=v31.rend();i!=v31.rbegin();i--)
      cout<<*i<<" ";

//rbegin() & rend():結束============================================================================================================

//reserve():給vector配置長度============================================================================================================
   vector<int> v32;
   v32.reserve(3);
   cout<<v32.capacity()<<endl;
   cout<<v32.size()<<endl;
   for(int i=0;i<3;i++)
      v32[i]=i+2;//塞不進去，但是可以使用到此空間，不會segmentation fault
   cout<<v32[0]<<endl;
   print(v32,32);
   cout<<v32.size()<<endl;
   v32.push_back(1);
   cout<<v32[0]<<endl;
   v32.reserve(1);
//reserve() 結束============================================================================================================

//resize():給vector配置容納元素的長度============================================================================================================
   
   
   vector<int> v33;
   v33.resize(3);
   cout<<v33.capacity()<<endl;
   cout<<v33.size()<<endl;
   for(int i=0;i<3;i++)
      v33[i]=i+2;//塞不進去，但是可以使用到此空間，不會segmentation fault
   cout<<v33[0]<<endl;
   print(v33,33);
   cout<<v33.size()<<endl;
   v33.push_back(1);
   cout<<v33[0]<<endl;
   v33.resize(1);
   cout<<v33.capacity()<<endl;
   cout<<v33.size()<<endl;
//resize(): 結束============================================================================================================

//shrink_to_fit():刪除多餘的長度============================================================================================================
   vector<int> v34({1,2,3});
   v34.push_back(4);
   cout<<v34.capacity()<<endl;
   cout<<v34.size()<<endl;
   v34.shrink_to_fit();
   cout<<v34.capacity()<<endl;
   cout<<v34.size()<<endl;
   
//shrink_to_fit():結束============================================================================================================

//swap():交換兩個vector============================================================================================================
   vector<int> v35({1,2,3,4,5});
   vector<int> v35_1({11,12,13,14,15});

   print(v35,35);
   swap(v35,v35_1);
   print(v35,35);
   v35.swap(v35_1);
   print(v35,35);

//
*/










}